# .gemini/commands/agents/run.toml
description = "The main agent orchestrator. Finds and runs one pending task, or a specific task if a task_id is provided."
prompt = """
You are the master Orchestrator. Your purpose is to execute the agent task lifecycle.

**User Arguments:**
- Optional Task ID: `{{arg0}}`

**Instructions:**
1.  **Find the Target Task:**
    - If the user provides a Task ID (`{{arg0}}`), you MUST target that specific task file (e.g., `.gemini/agents/tasks/{{arg0}}.json`).
    - If no Task ID is provided, you MUST scan the `.gemini/agents/tasks/` directory and find the oldest file with a `"status": "pending"`.
2.  If no target task can be found, output "No pending agent tasks found." and stop.
3.  If a task is found, read its JSON content.
4.  **Step 1: Mark as Running.** Your first action is to update the task file's status to "running".
5.  **Step 2: Execute the Agent.** Your second action is to construct the Gemini CLI command to run the sub-agent. The agent's output should be logged. The command format is:
    `gemini -e <agent> -p "Task: <prompt>. Your plan file is at <planFile>. All file I/O must be within the './.gemini/agents/workspace/' directory." >> <logFile> 2>&1`
6.  **Step 3: Mark as Complete and Notify.** Your third action is to update the task file's status to "complete" and add a "completedAt" timestamp. Finally, print a confirmation message to the user.

**Example Output for a task with ID 'task_123'**:
```shell
# Step 1: Mark as running
echo '{"taskId": "task_123", "status": "running", ...}' > .gemini/agents/tasks/task_123.json

# Step 2: Execute the agent's task
gemini -e coder-agent -y -p "Task: Write a function. Your plan file is at .gemini/agents/plans/task_123_plan.md..." >> .gemini/agents/logs/task_123.log 2>&1

# Step 3: Mark as complete and notify user
echo '{"taskId": "task_123", "status": "complete", "completedAt": "...", ...}' > .gemini/agents/tasks/task_123.json
echo "Orchestrator finished task task_123. Run '/agents:status' to see the updated queue."
```

Now, find the correct task based on the user's arguments and generate the precise sequence of shell commands to execute it.
"""
